# Reglas del Proyecto EssentialFeed

## Tabla de Contenidos
1. [Arquitectura](#arquitectura)
2. [Estructura del Proyecto](#estructura-del-proyecto)
3. [Estilo de C√≥digo](#estilo-de-c√≥digo)
4. [Testing](#testing)
5. [Flujo de Trabajo](#flujo-de-trabajo)
6. [Seguridad](#seguridad)
7. [Documentaci√≥n](#documentaci√≥n)
8. [CI/CD](#cicd)
9. [Reglas del Workspace](#reglas-del-workspace)

---

## 1. Arquitectura

### Clean Architecture

#### Capas Principales
1. **Domain** (N√∫cleo)
   - Entidades del negocio (inmutables)
   - Value Objects (objetos de valor)
   - Casos de uso (Use Cases sin estado)
   - Protocolos de repositorios
   - Errores de dominio
   - Reglas de negocio y validaciones
   - ‚úÖ No depende de otras capas

2. **Infrastructure**
   - Implementaciones concretas de repositorios
   - Fuentes de datos:
     - API Clients (REST/GraphQL)
     - Persistencia local (CoreData/Realm)
   - Mapeo DTO ‚Üî Entidad
   - Manejo de errores de red/BD
   - ‚¨ÜÔ∏è Depende del Domain

3. **Presentation**
   - **MVVM** (SwiftUI) / **MVP** (UIKit)
   - ViewModels/Presenters (`@MainActor`)
   - Vistas (SwiftUI Views/UIViewControllers)
   - Estados de UI (carga/√©xito/error)
   - Coordinadores/Routers(no en este proyecto)
   - Inyecci√≥n de dependencias
   - ‚¨ÜÔ∏è Depende del Domain

### Patrones de Dise√±o
- **MVVM** para SwiftUI y para UIKit 
- **MVP** para UIKit y SwiftUI (si proyecto lo requiere)
- **Factory** para creaci√≥n de dependencias
- **Router/Coordinator** para navegaci√≥n (no en este proyecto)
- **Repository** para acceso a datos

---

## 2. Estructura del Proyecto

### Layout General
```
essential-feed-case-study/
‚îú‚îÄ‚îÄ EssentialApp/                 # Aplicaci√≥n principal
‚îÇ   ‚îú‚îÄ‚îÄ EssentialApp/             # C√≥digo fuente
‚îÇ   ‚îú‚îÄ‚îÄ EssentialAppTests/        # Pruebas unitarias
‚îÇ   ‚îî‚îÄ‚îÄ EssentialApp.xcodeproj/   # Proyecto Xcode
‚îÇ
‚îú‚îÄ‚îÄ EssentialFeed/                # Framework principal
‚îÇ   ‚îú‚îÄ‚îÄ EssentialFeed/           # C√≥digo fuente
‚îÇ   ‚îú‚îÄ‚îÄ EssentialFeedTests/       # Pruebas unitarias
‚îÇ   ‚îî‚îÄ‚îÄ EssentialFeed.xcodeproj/  # Proyecto Xcode
‚îÇ
‚îú‚îÄ‚îÄ coverage-reports/            # Informes de cobertura
‚îú‚îÄ‚îÄ docs/                        # Documentaci√≥n
‚îî‚îÄ‚îÄ scripts/                     # Scripts de automatizaci√≥n
```

### Estructura de Features
```
Features/
‚îú‚îÄ‚îÄ AuthFeature/                 # Autenticaci√≥n
‚îÇ   ‚îú‚îÄ‚îÄ Domain/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Entities/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UseCases/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Protocols/
‚îÇ   ‚îú‚îÄ‚îÄ Data/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Repositories/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ DataSources/
‚îÇ   ‚îî‚îÄ‚îÄ Presentation/
‚îÇ       ‚îú‚îÄ‚îÄ ViewModels/
‚îÇ       ‚îî‚îÄ‚îÄ Views/
‚îÇ
‚îî‚îÄ‚îÄ SecurityFeature/            # Seguridad
    ‚îú‚îÄ‚îÄ Domain/
    ‚îÇ   ‚îú‚îÄ‚îÄ Entities/
    ‚îÇ   ‚îú‚îÄ‚îÄ UseCases/
    ‚îÇ   ‚îî‚îÄ‚îÄ Protocols/
    ‚îú‚îÄ‚îÄ Data/
    ‚îÇ   ‚îú‚îÄ‚îÄ Repositories/
    ‚îÇ   ‚îî‚îÄ‚îÄ DataSources/
    ‚îî‚îÄ‚îÄ Presentation/
        ‚îú‚îÄ‚îÄ ViewModels/
        ‚îî‚îÄ‚îÄ Views/
```

---

## 3. Estilo de C√≥digo

### Convenciones de Nombrado
- **Tipos**: `PascalCase` (`LoginViewController`, `UserRepository`)
- **Variables/Funciones**: `camelCase` (`userName`, `fetchUserData()`)
- **Constantes**: `camelCase` con contexto (`maxRetryCount`)
- **Protocolos**: 
  - `-able` para capacidades (`Cacheable`)
  - `-ing` para comportamientos (`Logging`)
  - `-Type` para tipos asociados (`RepositoryType`)
- **Tests**: `test_methodName_whenCondition_shouldExpectedBehavior()`

### Estructura
- **Archivos**: M√°ximo 500 l√≠neas
- **Funciones**: M√°ximo 50 l√≠neas
- **L√≠neas**: 120 caracteres m√°ximo
- **Espaciado**:
  - 1 l√≠nea entre m√©todos
  - 2 l√≠neas entre secciones
  - 1 l√≠nea entre l√≥gica relacionada

### SwiftLint
- Configuraci√≥n est√°ndar del equipo
- Corregir warnings antes de commit
- Documentar supresiones de reglas

---

## 4. Testing

### Estrategia
- **TDD/BDD**
- **AAA** (Arrange-Act-Assert)
- Un comportamiento por test
- Spies sobre Mocks
- Cobertura m√≠nima: 80%

### Estructura de Tests
```
Tests/
‚îî‚îÄ‚îÄ [Feature]Tests/
    ‚îú‚îÄ‚îÄ Domain/
    ‚îÇ   ‚îú‚îÄ‚îÄ [Entity]Tests.swift
    ‚îÇ   ‚îî‚îÄ‚îÄ UseCases/
    ‚îÇ       ‚îî‚îÄ‚îÄ [UseCase]Tests.swift
    ‚îÇ
    ‚îú‚îÄ‚îÄ Infrastructure/
    ‚îÇ   ‚îú‚îÄ‚îÄ Repositories/
    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [Repository]Tests.swift
    ‚îÇ   ‚îî‚îÄ‚îÄ DataSources/
    ‚îÇ       ‚îî‚îÄ‚îÄ [DataSource]Tests.swift
    ‚îÇ
    ‚îî‚îÄ‚îÄ Presentation/
        ‚îî‚îÄ‚îÄ [MVVM o MVP]/
            ‚îú‚îÄ‚îÄ ViewModels/
            ‚îÇ   ‚îî‚îÄ‚îÄ [ViewModel]Tests.swift
            ‚îî‚îÄ‚îÄ Views/
                ‚îî‚îÄ‚îÄ [View]Tests.swift
```

### Test Doubles (Spies)
```swift
class LoginServiceSpy: LoginServiceProtocol {
    var loginCallCount = 0
    var loginArgs: [(email: String, password: String)] = []
    
    func login(email: String, password: String) async throws -> User {
        loginCallCount += 1
        loginArgs.append((email, password))
        // Implementaci√≥n para testing
    }
}
```

### Configuraci√≥n de Tests
```swift
private func makeSUT(
    service: LoginServiceProtocol = LoginServiceSpy(),
    file: StaticString = #filePath,
    line: UInt = #line
) -> (sut: LoginViewModel, spy: LoginServiceSpy) {
    let spy = service as? LoginServiceSpy ?? LoginServiceSpy()
    let sut = LoginViewModel(service: spy)
    trackForMemoryLeaks(sut, file: file, line: line)
    trackForMemoryLeaks(spy, file: file, line: line)
    return (sut, spy)
}
```

---

## 5. Flujo de Trabajo

### Ramas
- `feature/ABC-123-descripcion` (nuevas funcionalidades)
- `fix/ABC-124-correccion` (correcci√≥n de bugs)
- `refactor/ABC-125-mejora` (mejoras de c√≥digo)
- `chore/ABC-126-tarea` (tareas de mantenimiento)
- `release/v1.0.0` (preparaci√≥n de release)
- `hotfix/ABC-127-urgente` (correcciones cr√≠ticas)

### Commits
```
<tipo>(<√°mbito>): <mensaje>

[cuerpo opcional]
[pie de p√°gina opcional]
```

#### Tipos de Commits
| Tipo      | Descripci√≥n                                  |
|-----------|---------------------------------------------|
| `feat`    | Nueva funcionalidad                        |
| `fix`     | Correcci√≥n de bug                           |
| `refactor`| Mejoras de c√≥digo sin cambiar funcionalidad|
| `test`    | Adici√≥n o modificaci√≥n de pruebas          |
| `chore`   | Tareas de mantenimiento                    |
| `docs`    | Actualizaci√≥n de documentaci√≥n             |

### Revisi√≥n de C√≥digo
- PRs peque√±os (< 400 l√≠neas)
- Descripciones claras
- Cambios autocontenidos
- Seguir est√°ndares de c√≥digo
- Abordar deuda t√©cnica

---

## 6. Seguridad

### Almacenamiento
- Usar Keychain para datos sensibles
- No almacenar credenciales en UserDefaults
- Cifrar datos sensibles en disco

### Red
- Usar HTTPS exclusivamente
- Certificate Pinning
- Validar certificados SSL
- No permitir tr√°fico HTTP inseguro

### Validaci√≥n
- Validar todas las entradas
- Sanitizar datos del usuario
- Protecci√≥n contra inyecci√≥n SQL
- Manejar tokens de forma segura

### Autenticaci√≥n
- Soporte para autenticaci√≥n biom√©trica
- Gesti√≥n segura de sesiones
- Protecci√≥n contra fuerza bruta
- Logout autom√°tico tras inactividad

---

## 7. Documentaci√≥n

### C√≥digo
- Documentar APIs p√∫blicas con `///`
- Incluir ejemplos de uso
- Documentar par√°metros y valores de retorno
- Especificar precondiciones y postcondiciones

### Proyecto
- Mantener actualizado el README.md
- Documentar decisiones de arquitectura
- Mantener un CHANGELOG.md
- Gu√≠a de contribuci√≥n CONTRIBUTING.md

### Comunicaci√≥n
- Explicaciones en espa√±ol
- C√≥digo, commits y mensajes en ingl√©s
- Comentarios en c√≥digo en ingl√©s

---

## 8. CI/CD

### Automatizaci√≥n
- Fastlane para automatizaci√≥n
- Integraci√≥n continua con GitHub Actions
- Despliegue continuo configurado
- Notificaciones de build

### Calidad de C√≥digo
- An√°lisis est√°tico
- Cobertura de c√≥digo > 80%
- Pruebas unitarias obligatorias
- Pruebas de UI para flujos cr√≠ticos

### Despliegue
- Firma de c√≥digo autom√°tica
- Distribuci√≥n beta
- Release notes autom√°ticos
- Versionado sem√°ntico

### Monitoreo
- Informes de cobertura
- An√°lisis de rendimiento
- Detecci√≥n de fugas de memoria
- M√©tricas de calidad

---

## 9. Reglas del Workspace

### Comunicaci√≥n y C√≥digo
- Explicaciones, revisiones y documentaci√≥n: **siempre en espa√±ol**
- C√≥digo, nombres, commits, mensajes de error y asserts: **siempre en ingl√©s**

### Testing y Calidad
- **TDD y BDD**: Todo lo funcional debe estar cubierto por tests antes de marcar como hecho
- **Tipos de tests**: unitarios, integraci√≥n, UI, snapshot, end-to-end
- **Spies y test doubles**: Usar spies como primera opci√≥n
- **Actualizaci√≥n de BDD**:
  - Solo una subtask en üöß (en curso)
  - Siguiente en üîú (planificada)
  - Resto en ‚ùå (pendiente)
  - Solo en ‚úÖ lo 100% cubierto
  - Task principal solo en verde si todas las subtasks lo est√°n

### Procesos
- **Antes de implementar**: Analizar el proyecto, dependencias y duplicidades
- **Tras cada avance**: Actualizar BDD, documentaci√≥n y snapshots
- **Commits y PRs**:
  - Mensajes descriptivos en ingl√©s
  - PRs con checklist de criterios de aceptaci√≥n
  - Revisi√≥n de c√≥digo obligatoria

---

*√öltima actualizaci√≥n: 2025-05-19*
*Documento generado autom√°ticamente. Para editar, modificar este archivo directamente.*
