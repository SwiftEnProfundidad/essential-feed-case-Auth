name: EssentialFeed CI

on:
  push:
    branches: [ main, master, "feature/**" ]
  pull_request:
    branches: [ main, master, "feature/**" ]

jobs:
  build-and-test-ios:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SwiftFormat
        run: brew install swiftformat

      - name: Run SwiftFormat (fail if not clean)
        run: |
          swiftformat .
          git diff --exit-code || (echo "SwiftFormat found issues. Please run swiftformat locally." && exit 1)

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest
      - name: Build and test EssentialApp (iOS)
        run: |
          set -e
          xcodebuild test \
            -workspace EssentialApp/EssentialApp.xcworkspace \
            -scheme EssentialApp \
            -destination 'platform=iOS Simulator,name=iPhone 16 Pro,OS=18.2' \
            -enableCodeCoverage YES | tee build-and-test-ios.log | xcpretty
          cat build-and-test-ios.log

  build-and-test-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SwiftFormat
        run: brew install swiftformat

      - name: Run SwiftFormat (fail if not clean)
        run: |
          swiftformat .
          git diff --exit-code || (echo "SwiftFormat found issues. Please run swiftformat locally." && exit 1)

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest
      - name: Build and test EssentialFeed (macOS)
        run: |
          set -e
          xcodebuild clean build test \
            -project EssentialFeed/EssentialFeed.xcodeproj \
            -scheme "CI_macOS" \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO \
            -sdk macosx \
            -destination "platform=macOS" \
            ONLY_ACTIVE_ARCH=YES

        env:
          NSUnbufferedIO: YES

      - name: List ALL files in DerivedData (exhaustive debug)
        run: |
          if [ -d "$HOME/Library/Developer/Xcode/DerivedData" ]; then
            find $HOME/Library/Developer/Xcode/DerivedData -print
          else
            echo "DerivedData directory does not exist yet."
          fi

      # Paso de debug opcional: puedes eliminarlo si ya no necesitas rastrear paths
      - name: List build products (debug)
        run: |
          if [ -d "$HOME/Library/Developer/Xcode/DerivedData" ]; then
            find $HOME/Library/Developer/Xcode/DerivedData -name "*.xcresult" -print
          else
            echo "DerivedData directory does not exist yet."
          fi

      - name: Extract coverage from xcresult
        run: |
          set -e
          XCRESULT_PATH=$(find $HOME/Library/Developer/Xcode/DerivedData -name "*.xcresult" | sort | tail -n 1)
          if [[ -z "$XCRESULT_PATH" ]]; then
            echo "No xcresult bundle found."
            exit 1
          fi
          xcrun xccov view --report --json "$XCRESULT_PATH" > coverage.json
          cat coverage.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.json
          fail_ci_if_error: false
